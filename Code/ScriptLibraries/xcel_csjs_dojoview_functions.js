function getGridDetails(viewTableId){	var grid = dijit.byId(viewTableId);	var items = grid.selection.getSelected();	var noteids = [];	if(items.length > 0) {		for(var i=0;i<items.length;i++){			noteids.push(items[i].noteid);		}		return noteids.join(",");	}else {		return "";	}}function getSelectedDocumentIds(viewTableId) {	var grid = dijit.byId(viewTableId);	var items = grid.selection.getSelected();		if(items.length > 0) {		for(var i=0;i<items.length;i++){			noteids.push(items[i].noteid);		}		return noteids.join(",");			}else {		return "";	}}function expandView(viewTableId) {	var grid = dijit.byId(viewTableId);	grid.expandAll();}function collapseView(viewTableId) {	var grid = dijit.byId(viewTableId);	grid.collapseAll();}function printView(viewTableId) {  dijit.byId(viewTableId).printGrid({title:'viewname',cssFiles:['print_grid1.css','print_grid2.css']});}function printSelected(viewTableId) {  dijit.byId(viewTableId).printSelected({title:'viewname',cssFiles:['print_grid1.css','print_grid2.css']});}function printPreview(viewTableId) {  dijit.byId(viewTableId).exportToHTML(  		{	title:'viewname',  			cssFiles:['print_grid1.css','print_grid2.css']},  			function(str){   				var win = window.open();	  				win.document.open();   				win.document.write(str);   				dijit.byId(viewTableId).normalizePrintedGrid(win.document);	  				win.document.close();  			}  		);  }function copyAsTable(viewTableId) {  console.log("copyAsTable View is not implemented");}function getDocumentCount(viewTableId) {  return dijit.byId(viewTableId).rowCount;}function refreshView(viewTableId) {  dijit.byId(viewTableId).refresh(true);}function showSearchView(viewTableId,show) {	dijit.byId(viewTableId).showFilterBar(show);}function createNewDocument(viewTableId,formName) {}function createNewResponseDocument(viewTableId,formName) {}function moveToTrash(viewTableId,docIds){}