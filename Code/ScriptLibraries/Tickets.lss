'++LotusScript Development Environment:2:5:(Options):0:74
' Â© Copyright IBM Corp. 2009 
'
' Licensed under the Apache License, Version 2.0 (the "License");  
' you may not use this file except in compliance with the License. 
' You may obtain a copy of the License at:
'
' http://www.apache.org/licenses/LICENSE-2.0 
'
' Unless required by applicable law or agreed to in writing, software
' distributed under the License is distributed on an "AS IS" BASIS, 
' WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or 
' implied. See the License for the specific language governing 
' permissions and limitations under the License.
Option Public
Option Declare

'++LotusScript Development Environment:2:5:(Forward):0:1
Declare Sub RefreshCurrentView()
Declare Sub CommonSave(doc As NotesDocument)
Declare Function GetSelectedDocument() As NotesDocument
Declare Function GetRandomNum(upperLimit%) As Integer
Declare Sub AssignTicketAction(doc As NotesDocument)
Declare Sub AddCommentAction(doc As NotesDocument)
Declare Sub AssertRequiredField(doc As NotesDocument, fieldName$, label$)
Declare Sub RefreshCurrentDocument()
Declare Sub SubmitTicketAction(doc As NotesDocument)
Declare Sub CloseTicketAction(doc As NotesDocument)
Declare Function GenerateTicketId() As String
Declare Sub AppendToHistory(doc As NotesDocument, msg$)

'++LotusScript Development Environment:2:5:(Declarations):0:10
Const STATUS_DRAFT$ = "Draft"
Const STATUS_SUBMITTED$ = "Submitted"
Const STATUS_ASSIGNED$ = "Assigned"
Const STATUS_CLOSED$ = "Closed"

Const ERROR_REQUIRED_FIELD% = 1000
Const ERROR_UNABLE_PERFORM_OPERATION% = 1001
Const ERROR_UNABLE_PERFORM_OPERATION__MSG$ = "Unable to perform operation"


'++LotusScript Development Environment:2:2:RefreshCurrentView:5:8

%REM
	Force current view to refresh
%END REM
Sub RefreshCurrentView()
	Dim uiw As New NotesUIWorkspace
	Dim uiview As NotesUIView
	Set uiview = uiw.Currentview
	Call uiw.Viewrefresh()
End Sub

'++LotusScript Development Environment:2:2:CommonSave:5:8
%REM
	Sub CommonSave
	Description: Comments for Sub
%END REM
Sub CommonSave(doc As NotesDocument)
	Call doc.replaceItemValue("Updated", Now)
	Call doc.replaceItemValue("UpdatedBy", doc.Parentdatabase.Parent.Effectiveusername)
	
	If (Not doc.hasItem("Created")) Then
		Call doc.replaceItemValue("Created", Now)
		Call doc.replaceItemValue("CreatedBy", doc.Parentdatabase.Parent.Effectiveusername)		
	End If	
End Sub


'++LotusScript Development Environment:2:1:GetSelectedDocument:5:8

%REM
	Return the selected document from the current view
%END REM
Function GetSelectedDocument() As NotesDocument
	Dim session As New NotesSession
	Dim db As NotesDatabase
	Dim doc As NotesDocument
	Dim dc As NotesDocumentCollection
	Dim rc%
	
	Set db = session.CurrentDatabase	
	Set dc = db.UnprocessedDocuments	
	If (dc.Count = 0) Then
		Exit Function
	End If
	Set GetSelectedDocument = dc.GetFirstDocument	
End Function

'++LotusScript Development Environment:2:1:GetRandomNum:5:8
%REM
	Function GetRandomNum
	Description: Comments for Function
%END REM
Function GetRandomNum(upperLimit%) As Integer
	GetRandomNum = CInt(Rnd() * upperLimit%)
End Function


'++LotusScript Development Environment:2:2:AssignTicketAction:5:8
%REM
	Function AssignTicketDialog
	Returns True if ticket was successfully assigned
%END REM
Sub AssignTicketAction(doc As NotesDocument)
	Dim uiw As New NotesUIWorkspace
	Dim session As New NotesSession
	Dim db As NotesDatabase
	Dim req As NotesDocument	
	Dim rc%, assignedTo$
	
	Set db = session.Currentdatabase
	Set req = db.Createdocument()
	Call req.Replaceitemvalue("Category", doc.getItemValue("Category"))
	
	rc% = uiw.Dialogbox("dialogAssignTicket", True, True, False, False, False, False, "Assign Ticket", req, True, False, True)
	If (rc% = True) Then
		assignedTo$ = req.getItemValue("AssignedTo")(0)
		If (assignedTo$ <> "") Then

			' get Notes name
			Dim assignedToNotes As New NotesName(assignedTo$)
			
			' update doc fields
			Call doc.replaceItemValue("Status", STATUS_ASSIGNED$)
			Call doc.replaceItemValue("Assigned", Now)
			Call doc.replaceItemValue("AssignedBy", doc.Parentdatabase.Parent.Effectiveusername)
			Call doc.replaceItemValue("AssignedTo", assignedToNotes.Canonical)
			Call AppendToHistory(doc, "Ticket assigned to " + assignedToNotes.Abbreviated)
			
			Call CommonSave(doc)	
			Call doc.save(True, False)	

			Call RefreshCurrentView()
			Call RefreshCurrentDocument()
			MessageBox "Ticket successfully assigned", 64			
		End If
	End If
End Sub

'++LotusScript Development Environment:2:2:AddCommentAction:5:8
%REM
	Append a comment to ticket history
	Returns True if comment was successfully added
%END REM
Sub AddCommentAction(doc As NotesDocument)
	Dim uiw As New NotesUIWorkspace
	Dim session As New NotesSession
	Dim db As NotesDatabase
	Dim req As NotesDocument	
	Dim rc%, comment$
	
	Set db = session.Currentdatabase
	Set req = db.Createdocument()
	
	rc% = uiw.Dialogbox("dialogAddComment", True, True, False, False, False, False, "Comments", req, True, False, True)
	If (rc% = True) Then
		comment$ = req.getItemValue("Comment")(0)
		If (comment$ <> "") Then
			Call AppendToHistory(doc, "Comments: " + comment$)
			Call CommonSave(doc)	
			Call doc.save(True, False)
			Call RefreshCurrentView() 
			MessageBox "Comment successfully added", 64
		End If
	End If
End Sub

'++LotusScript Development Environment:2:2:AssertRequiredField:6:8

%REM
	Function GetRandomNum
	Description: Comments for Function
%END REM
Sub AssertRequiredField(doc As NotesDocument, fieldName$, label$)
	Dim value$
	value$ = doc.GetItemValue(fieldName$)(0)
	If (value$ = "") Then
		Error ERROR_REQUIRED_FIELD%, "Field " + label$ + " is required"
	End If
End Sub

'++LotusScript Development Environment:2:2:RefreshCurrentDocument:4:8
%REM
    Refresh the current document
%END REM
Sub RefreshCurrentDocument()
	Dim uiw As New NotesUIWorkspace
	Dim uidoc As NotesUIDocument
	Dim doc As NotesDocument
	
	If (Not uidoc Is Nothing) Then
		Set uidoc = uiw.currentDocument	
		Set doc = uidoc.Document
	
		Call uidoc.close(True)
		Call uiw.Editdocument(False, doc, False)
	End If
End Sub

'++LotusScript Development Environment:2:2:SubmitTicketAction:4:8
%REM
	Submits a ticket.
%END REM
Sub SubmitTicketAction(doc As NotesDocument)
	Dim status$
	status$ = doc.getItemValue("Status")(0)
	If (status$ = STATUS_DRAFT$) Then
	
		' set doc fields
		Call doc.replaceItemValue("Status", STATUS_SUBMITTED$)
		Call doc.replaceItemValue("Submitted", Now)
		Call doc.replaceItemValue("SubmittedBy", doc.Parentdatabase.Parent.Effectiveusername)
		Call doc.replaceItemValue("ID", GenerateTicketId())
		Call AppendToHistory(doc, "Ticket submitted")
	
		Call CommonSave(doc)
		Call doc.save(True, False)	
	
		Call RefreshCurrentView()
		Call RefreshCurrentDocument()
		MessageBox "Ticket submitted successfully", 64
	End if	
End Sub

'++LotusScript Development Environment:2:2:CloseTicketAction:5:8
%REM
	Close ticket
	Returns True if ticket was successfully closed
%END REM
Sub CloseTicketAction(doc As NotesDocument)
	Dim uiw As New NotesUIWorkspace
	Dim session As New NotesSession
	Dim db As NotesDatabase
	Dim req As NotesDocument	
	Dim rc%, resolution$
	
	Set db = session.Currentdatabase
	Set req = db.Createdocument()
	
	rc% = uiw.Dialogbox("dialogCloseTicket", True, True, False, False, False, False, "Close Ticket", req, True, False, True)
	If (rc% = True) Then
		resolution$ = req.getItemValue("Resolution")(0)
		If (resolution$ <> "") Then
			' update doc fields
			Call doc.replaceItemValue("Status", STATUS_CLOSED$)
			Call doc.replaceItemValue("Closed", Now)
			Call doc.replaceItemValue("ClosedBy", doc.Parentdatabase.Parent.Effectiveusername)
			Call doc.replaceItemValue("Resolution", resolution$)
			Call AppendToHistory(doc, "Ticket closed, resolution: " + resolution$)
			
			Call CommonSave(doc)	
			Call doc.save(True, False)
			
			Call RefreshCurrentView()
			Call RefreshCurrentDocument()
			MessageBox "Ticket successfully closed", 64
		End If
	End If
End Sub

'++LotusScript Development Environment:2:1:GenerateTicketId:5:8
%REM
	Function GenerateTicketId
	Description: Comments for Function
%END REM
Function GenerateTicketId() As String
	Dim i%, id$
	id$ = ""
	For i%=1 To 10
		id$ = id$ + Left$(CStr(GetRandomNum(10)), 1)
	Next
	GenerateTicketId = id$
End Function


'++LotusScript Development Environment:2:2:AppendToHistory:4:8
%REM
	Appends a new entry to the History rtf
%END REM
Sub AppendToHistory(doc As NotesDocument, msg$)
	Dim session As NotesSession
	Dim rti As NotesRichTextItem
	Dim userNameNotes As NotesName 
	Dim userName$
	Dim headerStyle As NotesRichTextStyle
	Dim labelStyle As NotesRichTextStyle	
	Dim messageStyle As NotesRichTextStyle	
	Dim plainStyle As NotesRichTextStyle	
	Const historyFieldName$ = "History"
	Set session = doc.Parentdatabase.Parent
	
	' get/create rti
	If (doc.Hasitem(historyFieldName$)) Then
		Set rti = doc.getFirstItem(historyFieldName$)
	Else
		Set rti = doc.Createrichtextitem(historyFieldName$)
	End If
	
	' get display name
	Set userNameNotes = New NotesName(session.Effectiveusername)
	userName$ = userNameNotes.Abbreviated
	
	' create styles
	Set headerStyle = session.Createrichtextstyle()
	headerStyle.Bold = False
	headerStyle.Fontsize = 10
	headerStyle.Notescolor = COLOR_BLACK
	Set labelStyle = session.Createrichtextstyle()
	labelStyle.Bold = False
	labelStyle.Fontsize = 8
	labelStyle.Notescolor = COLOR_BLACK
	Set messageStyle = session.Createrichtextstyle()
	messageStyle.Bold = False
	messageStyle.Fontsize = 8
	messageStyle.Notescolor	= COLOR_DARK_BLUE
	Set plainStyle = session.Createrichtextstyle()
	
	' add spacing if this is not the first entry
	If (rti.Getunformattedtext() <> "") Then
		Call rti.Addnewline(2, True)		
	End If
	
	' message divider
	Call rti.Appendstyle(headerStyle)
	Call rti.Appendtext(UString$(150, "-"))
	Call rti.Addnewline(1, False)

	' message contents
	Call rti.Appendstyle(labelStyle)
	Call rti.Appendtext("[" + Now + "] ")
	Call rti.Appendtext(userName$ + ": ")	
	Call rti.Appendstyle(messageStyle)
	Call rti.Appendtext(msg$)
	
	' set last activity
	Call doc.replaceItemValue("LastActivity", msg$)
	Call doc.replaceItemValue("LastActivityBy", session.Effectiveusername)
	Call doc.replaceItemValue("LastActivityDate", Now)
End Sub